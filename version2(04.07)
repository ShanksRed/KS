#include "stdafx.h"
#include <iostream>
#include <math.h>
#include <iomanip>
#include <fstream> 
#include <stdio.h>
#include <cstdlib>
#include <vector>

using namespace std;

double Pi = 3.141592653589793238462643;
double R0 = 0.5;
double f = 8.803677243;



enum FreeType { neutral, strong_acid, weak_acid};

class monomerType {
public:
	friend class molSystem;
	//конструктор с начальными данными
	monomerType()
	{
		int temp;
		ifstream infile("data.txt");
		infile >> Ns >> g >> db >> M >> speed >> tolerance >> max_step >>alpha_charge>>phibulk_salt
		>>pH>>pKW>>pKA>>phibS>>b>> surfaceRadius >> temp;//нач. парамертры
		for (int i = 0; i < Tr; i++) {
			phiNA[i]=phiCL[i]=phiW[i] = UNa[i] = UCl[i] = UW[i] = chargeLayer[i] = potential[i] = potential0[i] = 0;
		}
		//число ячеек в слое
		for (int i = 0; i < Tr; i++)
			numberOfCells[i] = 4 / 3 * Pi*(3 * pow((Tr + surfaceRadius), 2) - 3 * (Tr + surfaceRadius) + 1);
		Fn = f*(1.0 / (2 * Pi));
		//q[0]=density*L[0]
		chargeLayer[0] = densityOnSurface*numberOfCells[0];
		if (temp == 0) choise = neutral;
		else if (temp == 1) choise = strong_acid;
		else choise = weak_acid;
		infile.close();
	}

	//G через U
	void BoltzmannDistribution() {
		for (int i = 1; i < Tr - 1; i++)
			G[i] = exp(-U[i]);
	}

	//инициализация Gf и Gb
	void initializeBackAndForward() {
		for (int i = 0; i<Tr; i++)
		{
			Gf[i] = new double *[Ns + 2];
			for (int j = 0; j<Ns + 2; j++)
				Gf[i][j] = new double[g + 2];
		}
		for (int i = 0; i<Tr; i++)
		{
			Gb[i] = new double *[Ns + 2];
			for (int j = 0; j<Ns + 2; j++)
				Gb[i][j] = new double[g + 2];
		}

		for (int j = 1; j < Tr - 1; j++) {
			Gb[j][Ns + 1][g] = G[j];
		}
		Gf[1][1][1] = 1;
	}

	//считаем Gb
	void PropogatorMatricesGb(double*LambdaB, double*LambdaS, double*LambdaF) {

		for (int kt = 1; kt<g + 1; kt++) {
			//от чего s
			for (int st = Ns + 1; st > 1; st--) {
				for (int rt = 1; rt <Tr - 1; rt++) {
					Gb[rt][st - 1][g + 1 - kt] = G[rt] * (LambdaB[rt] * Gb[rt - 1][st][g + 1 - kt] + LambdaS[rt] * Gb[rt][st][g + 1 - kt] + LambdaF[rt] * Gb[rt + 1][st][g + 1 - kt]);
				}
			}
			// точка ветвления для Gb
			for (int rt = 1; rt < Tr - 1; rt++) {
				Gb[rt][Ns + 1][g + 1 - kt - 1] = pow(Gb[rt][1][g + 1 - kt], db - 1) / pow(G[rt], db - 2);
			}
		}
	}
	//считаем Gf
	void  PropogatorMatricesGf(double*LambdaB, double*LambdaS, double*LambdaF) {

		for (int kt = 1; kt <g + 1; kt++) {
			for (int st = 2; st <= Ns + 1; st++) {
				for (int rt = 1; rt < Tr - 1; rt++) {
					Gf[rt][st][kt] = G[rt] * (LambdaB[rt] * Gf[rt - 1][st - 1][kt] + LambdaS[rt] * Gf[rt][st - 1][kt] + LambdaF[rt] * Gf[rt + 1][st - 1][kt]);
				}
			}
			for (int rt = 1; rt < Tr - 1; rt++) {// точка ветвления для Gb
				Gf[rt][1][kt + 1] = Gf[rt][Ns + 1][kt] * pow(Gb[rt][1][kt + 1], db - 2) / pow(G[rt], db - 2);
			}
		}
	}

	//расчитать Фи
	void densityProfile(double*L) {
		double *phiDer = new double[Tr];
		double temp1, temp2, q;
		for (int rt = 0; rt < Tr - 1; rt++) {
			phiDer[rt] = 0;
		}
		for (int rt = 1; rt < Tr - 1; rt++) {
			temp1 = temp2 = 0;
			for (int st = 1; st < Ns + 1; st++) {
				temp1 += Gf[rt][st][1] * Gb[rt][st][1] / G[rt];
			}
			for (int kt = 2; kt < g + 1; kt++) { // g or g+1 ?
				for (int st = 1; st < Ns + 1; st++) {
					temp2 += pow((db - 1), kt - 1)*Gf[rt][st][kt] * Gb[rt][st][kt] / G[rt];
				}
			}
			phiDer[rt] += temp1 + temp2;
		}
		//ищем стат.сумму
		q = 0;
		for (int rt = 1; rt < Tr - 1; rt++) {
			q += (phiDer[rt] * L[rt]);
		}
		for (int rt = 1; rt < Tr - 1; rt++) {
			Phi[rt] = (phiDer[rt] * theta) / q;
		}
	}
	//Phi
	void densiyProfileForW() {
		for (int rt = 1; rt < Tr - 1; rt++) {
			Phi[rt] = G[rt];
		}
	}


	//phiSide
	void FuncForPhiSide(double*LambdaB, double*LambdaS, double*LambdaF) {
		for (int rt = 1; rt < Tr - 1; rt++) {
			phiSide[rt] = LambdaB[rt] * Phi[rt - 1] * LambdaS[rt] * Phi[rt] * LambdaF[rt] * Phi[rt + 1];
		}
	}
	//считаем обьемные доли воды(в воде?)
	void CalculationProportionInWater() {
		Cw = 1 / (6.02*pow(10, 23)*pow(b,3));
		if (choise == 0) {   //normal
			phibW = 1;
		}
		else if(choise==1) { //strong
			phibNa = phibCl = phibulk_salt;
			phibW = 1 - phibCl - phibNa;
		}
		else {               //weak
			float KwDer = pKW / Cw;
			phibH3O = pow(10, -pH) / Cw;
			phibH2O = (-1 + sqrt(1 + 4 * (1 - 2 * phibS)*KwDer / phibH3O)) / (2 * 2 * KwDer / phibH3O);
			phibOH = 1 / 2 * (1 - 2 * phibS - phibH2O);
			phibW = phibH3O + phibH2O + phibOH;
			phibNa = 1 - phibW - phibS;
			alphabH2O = phibH2O / phibW;
			alphabOH = phibOH / phibW;
			alphabH3O = phibH3O / phibW;
			float temp = pKA*alphabH2O / alphabH3O;
			alphabA = temp / (temp + !1);
			alphabAH = 1 - alphabA;
		}
	}

	//Константы для электростатического потенциала
	void auxiliaryFactors() {
		for (int i = 0; i < Tr; i++) {
			Cneg[i] = 2 * pow((Tr + surfaceRadius - 1), 2);
			Cpos[i] = 2 * pow((Tr + surfaceRadius), 2);
		}
		Cneg[0] = 0;
	}
	



private:
	FreeType choise;
	int Tr, Ns, g,db,M,max_step;
	double phibulk_salt, alpha_charge, q, theta, N, speed, tolerance, pH, pKW, pKA, b,
		phibW, phibNa, phibCl, phibH2O, phibOH,phibS, phibH3O,Cw,alphabH2O,alphabOH,
		alphabH3O,alphabA,alphabAH, surfaceRadius,Fn,densityOnSurface;
	double *G = new double[Tr];
	double *U = new double[Tr];
	double *UNa = new double[Tr];
	double *NCl = new double[Tr];
	double *chargeLayer = new double[Tr];
	double *UW = new double[Tr];
	double *Cneg = new double[Tr];
	double *Cpos = new double[Tr];
	double *numberOfCells = new double[Tr];
	double *phiSide = new double[Tr];
	double *Phi = new double[Tr];
	double *phiNA = new double[Tr];
	double *phiCL = new double[Tr];
	double *phiW = new double[Tr];
	double *UNa = new double[Tr];
	double *UCl = new double[Tr];
	double *UW = new double[Tr];
	double *potential0 = new double[Tr];
	double *potential = new double[Tr];
	double ***Gf = new double **[Tr];
	double ***Gb = new double **[Tr];
	unsigned char choiseR;


};




class molSystem:public monomerType {
public:

	//L
	void NumberOfCells() {
		for (int i = 0; i < r; i++) L[i] = 4.0 / 3.0 * Pi*(3 * pow((i + R0), 2) - 3 * (i + R0) + 1);
	}
	//A
	void ContactSurf() {
		for (int i = 0; i < r; i++) A[i] = 4 * Pi*pow((i + R0), 2);
	}
	//лямбда
	void probability() {
		double tempLambdB, tempLambdF, tempLambdS;
		tempLambdF = 1.0 / 6;
		tempLambdB = 1.0 / 6;
		tempLambdS = 1 - tempLambdB - tempLambdF;//вероятности перехода в плойской геометрии
		for (int i = 1; i < r; i++) {
			LambdaF[i] = tempLambdF*(A[i] / L[i]);
			LambdaB[i] = tempLambdB*(A[i - 1] / L[i]);
			LambdaS[i] = 1 - LambdaF[i] - LambdaB[i];
		}
	}
	//общая фи
	void getTotalPhi() {

		for (int i = 0; i < r; i++) {
			phiTotal[i] = 0;
			for (int j = 0; j < typeQuantity; j++)
				phiTotal[i] += instance[j].Phi[i];
		}
	}
	//профиль плотности
	void densityProfile() {
		for (int i = 0; i < typeQuantity; i++) {
			if (instance[i].choiseR == 1) {
				instance[i].initializeBackAndForward();
				instance[i].PropogatorMatricesGb(LambdaB, LambdaS, LambdaF);
				instance[i].PropogatorMatricesGf(LambdaB, LambdaS, LambdaF);
				instance[i].densityProfile(L);

			}
			else if (instance[i].choiseR == 2) {
				instance[i].densiyProfileForW();
			}
			else {
				break;
			}
		}
	}
	//градиент
	void SearchGrad() {
		for (int rt = 1; rt < r - 1; rt++) {
			grad[rt] += -1 + 1 / phiTotal[rt];
		}
	}
	//поле Лагранжа
	void Lagrange() {
		for (int rt = 1; rt < r - 1; rt++) {
			massLagrange[rt]= massLagrange[rt]-speed*grad[rt];
		}

	}

	//электростатический потенциал
	void ElectrostaticPotential() {

		for (int j = 1; j < r - 1; j++) {
			phiNA[j] = phibS*exp(-UNa[j]);
			phiCL[j] = phibS*exp(-UCl[j]);
			phiW[j] = phibW*exp(-UW[j]);
		}
		//заряды в слоях it's q
		for (int j = 1; j < r - 1; j++) {
			chargeLayer[j] = (phiNA[j] - phiCL[j])*numberOfCells[j];
		}
		//значения потенциала
		for (int j = 1; j < r - 1; j++) {
			potential0[j] = potential[j];
		}

		//potential0[0] = potential[0];
		potential0[Tr - 1] = potential[Tr - 2];
		for (int j = 1; j < Tr - 1; j++) {
			potential[j] = (Cneg[j] * potential0[j - 1] + Fn*chargeLayer[j] + Cpos[j] * potential0[j + 1]) / (Cpos[j] + Cneg[j]);
		}
		
		for (int j = 1; j < r - 1; j++) {
			UW[j] = massLagrange[j];
			UNa[j] = massLagrange[j] + potential[j];
			UCl[j] = massLagrange[j] - potential[j];
		}

	}

	void BolzmonWeights() {
		if (choise == 0) {
			for (int j = 1; j < Tr - 1; j++) {
				GH2O[j] = exp(-massLagrange[j]);
				GH3O[j] = exp(-massLagrange[j]- AlphaH3O[j]*potential[j]);
				GOH[j]=exp(-massLagrange[j] + AlphaOH[j] * potential[j]);
				GAH[j] = exp(-massLagrange[j] - AlphaAH[j] * potential[j]);
				GA[j] = exp(-massLagrange[j] + AlphaA[j] * potential[j]);
				GW[j] = alphabH2O*GH2O[j] + alphabH3O*GH3O[j] + alphabOH*GOH[j];
				GP[j] = alphabAH*GAH[j] + alphabA*GA[j];
				GNA[j] = exp(-massLagrange[j] - potential[j]);
				GCL[j] = exp(-massLagrange[j] + potential[j]);
			}
		}
	}


private:
	int r;
	int typeQuantity;
	double *L = new double[r];
	double *A = new double[r];
	double *LambdaF = new double[r];
	double *LambdaS = new double[r];
	double *LambdaB = new double[r];
	double *phiTotal = new double[r];
	double *alpha = new double[r];
	double *grad = new double[r];
	double *GH2O = new double[r];
	double *GH3O = new double[r];
	double *GOH = new double[r];
	double *GAH = new double[r];
	double *GA = new double[r];
	double *GW = new double[r];
	double *GP = new double[r];
	double *GNA = new double[r];
	double *GCL = new double[r];
	double *AlphaOH = new double[r];
	double *AlphaH3O = new double[r];
	double *AlphaAH = new double[r];
	double *AlphaA = new double[r];




	double *massLagrange = new double[r];

	//unsigned char r;
	monomerType *instance = new monomerType[typeQuantity];



};


int main()
{

}
